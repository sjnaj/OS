tldr:简化的--help

gdbtui demo -q

    layout split
    layout asm
    x/10 $esp-0x10
    ni
    i r

gcc -c :.c/.s->.o
gcc:.o->executable
obj -d x.o:反汇编

name=xx;
as --32 -o  $name.o $name.s;ld -s  -m elf_i386 -o $name $name.o
./$name
as  -o  $name.o $name.s;ld -s -o $name $name.o ;./$name

gcc会链接一些库文件，反汇编才能看到全部代码

ld -m elf_i386 -dynamic-linker /lib32/ld-linux.so.2 /lib32/libc-2.31.so cpuid.o -o cpuid  #32位链接libc
ld -lc -dynamic-linker /lib64/ld-linux-x86-64.so.2  -o cpuid64 cpuid64.o

大写S后缀的汇编文件才能被gcc预处理里面的头文件

strace:系统调用跟踪：https://www.cnblogs.com/machangwei-8/p/10388883.html
strace -tt -e trace=process -f ./a.out 

-tt 在每行输出的前面，显示毫秒级别的时间
-T 显示每次系统调用所花费的时间
-v 对于某些相关调用，把完整的环境变量，文件stat结构等打出来。
-f 跟踪目标进程，以及目标进程创建的所有子进程
-e 控制要跟踪的事件和跟踪行为,比如指定要跟踪的系统调用名称
-o 把strace的输出单独写到指定的文件
-s 当系统调用的某个参数是字符串时，最多输出指定长度的内容，默认是32个字节
-p 指定要跟踪的进程pid, 要同时跟踪多个pid, 重复多次-p选项即可。

thread
    用strace的结果可以判断出新建线程的系统调用是下面部分
    clone(child_stack=0x7fd9d2bb0fb0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[73288], tls=0x7fd9d2bb1700, child_tidptr=0x7fd9d2bb19d0) = 73288

    ./a.out | sort -nk 6 
    Stack size if T4 >= 8128KB
    本机每个线程最大的栈内存是8128kb，大约8MB
